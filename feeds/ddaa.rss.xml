<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>ddaa's blog - ddaa</title><link>https://ddaa.tw/</link><description>Write-ups for CTF.</description><lastBuildDate>Tue, 04 May 2021 15:19:00 +0800</lastBuildDate><item><title>DEF CON 29 CTF Quals Pwn 149 coooinbase</title><link>https://ddaa.tw/defconctf_pwn_149_coooinbase.html</link><description>&lt;p&gt;2020 一整年都沒發文 XD，去年只有打 DEF CON 初賽決賽而已，今年年初只打了 RealWorld CTF，現在比較少打 CTF，除了健康和體力不太能負荷，總覺得題目也沒有以前有趣了，大部分題目要花大量時間逆向，技術含量卻有限，常常辛苦逆向完或寫好工具，但解完這題之後就用不太上...不如把時間拿去挖 real world 的漏洞更有價值 QQ 這題在漏洞部分是比較簡單的題目，但利用這個漏洞需要發揮創意思考，如果沒有非預期的爛洞的話會是有趣的 pwn 題&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目連上後會是一個信用卡付款的 web 頁面，前端 post data 送到 ruby 寫的後端處理&lt;br&gt;
ruby 端會先檢查一下 card number 是否格式正確，然後將 post data 轉換成 &lt;strong&gt;bson&lt;/strong&gt; 格式後用 base64 編碼透過 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 04 May 2021 15:19:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2021-05-04:/defconctf_pwn_149_coooinbase.html</guid><category>DEF CON CTF</category><category>Stack Overflow</category><category>ARMv8</category><category>Shellcode</category></item><item><title>HITCON CTF 2019 Pwn 371 Netatalk</title><link>https://ddaa.tw/hitconctf_pwn_371_netatalk.html</link><description>&lt;p&gt;其實不是第一年在 HITCON CTF 出題，由於有正職在身，沒有時間從頭設計題目，因此都會盡量從跟工作有關聯的方向設計題目，今年這題其實也是在去年工作時處理 Insident Response 時遇到的 case，但經過深入研究後，發現了這個 CVE 有原揭露者沒想到的 exploit 方式，是我到現在出題為止最滿意的一題，從迴響上來看也是最好的一題 XD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Netatalk&lt;/strong&gt; 是一套實作蘋果系統上 AFP 協定的軟體，AFP 跟 Windows 上的 SMB 類似，是用於兩台不同電腦間需要傳輸檔案的一種 file transfer protocol，但後來隨著 Apple 也支援 SMB 後，AFP 的使用量相對減少很多，但由於用 AFP 傳輸檔案還是比 SMB 快速和簡便一些，因此還是有些人會搭配 Time Machine …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 16 Oct 2019 01:39:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2019-10-16:/hitconctf_pwn_371_netatalk.html</guid><category>HITCON CTF</category><category>Heap Overflow</category></item><item><title>Plaid CTF 2019 Pwn 250 Plaid Adventure II</title><link>https://ddaa.tw/plaidctf_pwn_250_plaid_adventure_ii.html</link><description>&lt;p&gt;這題約結束前 10 分鐘跟 angelboy 一起寫完 exploit&lt;br&gt;
已經確認在 local 可以打, 結果 remote server 壞掉 = =&lt;br&gt;
不然應該有機會 AK 的...QQ  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;跟去年 &lt;a href="https://ddaa.tw/plaidctf_reverse_200_plaid_adventure.html"&gt;Plaid Adventure&lt;/a&gt; 一樣是由 &lt;a href="http://inform7.com/"&gt;inform 7&lt;/a&gt; 寫成的互動式文字遊戲&lt;br&gt;
題目敘述說要讀取 &lt;code&gt;flag.glksave&lt;/code&gt;, 但沒辦法使用 &lt;code&gt;restore&lt;/code&gt; 這個指令&lt;br&gt;
目的還算滿明確, 要用題目中的漏洞想辦法繞開限制執行 &lt;code&gt;restore&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;逆向的方式請參考去年的 write up, 逆完之後大致可以知道遊戲是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有一個場景, 場景上只有 &lt;code&gt;machine&lt;/code&gt; 和 &lt;code&gt;blackboard&lt;/code&gt; 兩個物件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;look machine&lt;/code&gt; 可以從結果得知 &lt;code&gt;dial&lt;/code&gt;, &lt;code&gt;slider …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 16 Apr 2019 03:05:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2019-04-16:/plaidctf_pwn_250_plaid_adventure_ii.html</guid><category>PlaidCTF</category><category>Out-of-bound</category></item><item><title>35C3CTF 2018 zajebiste 290 logrotate</title><link>https://ddaa.tw/35c3ctf_2018_zajebiste_290_logrotate.html</link><description>&lt;p&gt;35C3 今年的題目也是超難 = =&lt;br&gt;
各種 browser 和 sandbox escape 題&lt;br&gt;
現在的 CTF 真的越來越 real world 啦&lt;br&gt;
BTW，&lt;code&gt;zajebiste&lt;/code&gt; 的分類聽說就是 zero day 的意思 XD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在星期五還在上班的時候，有人就敲我說有 &lt;code&gt;logrotate&lt;/code&gt; 這題  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有 log 題欸 你不是 log 大王嗎  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ok, challenge accepted. = =+&lt;br&gt;
結果從星期五晚上開始看，一直到星期六晚上才想到作法 QQ&lt;br&gt;
(雖然中間去幫忙看了一下 &lt;code&gt;collection&lt;/code&gt;)  &lt;/p&gt;
&lt;p&gt;簡單介紹一下這題的環境&lt;br&gt;
nc 連上通過 pow 的考驗之後&lt;br&gt;
會初始化一個 docker container 然後進入 chroot&lt;br&gt;
得到的權限會是 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 09 Jan 2019 20:23:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2019-01-09:/35c3ctf_2018_zajebiste_290_logrotate.html</guid><category>3XC3CTF</category><category>Bash</category><category>Race Condition</category></item><item><title>DEF CON 26 CTF Final summary</title><link>https://ddaa.tw/defcon_26_other_summary.html</link><description>&lt;p&gt;稍微紀錄一下 DEF CON 26 CTF 這幾天的事情...&lt;br&gt;
有些情況是睡醒之後聽大家轉述的，如果有誤還麻煩指證 XD&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Day 0&lt;/h2&gt;
&lt;p&gt;趕工封包分析工具，寫出各種 bug ... 早知道前幾天就少玩一點 switch 了 XD&lt;/p&gt;
&lt;p&gt;其中最麻煩的 bug 是發現封包如果時間非常接近時有 race condition 的問題，先發生的測試會被覆寫成同一次結果，搞東搞西弄到早上快五點才讓工具能正常工作 Orz&lt;/p&gt;
&lt;p&gt;&lt;img alt="switch.jpg" src="https://ddaa.tw/images/defcon_26_switch.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;p&gt;唯一下去會場的一天，一開始現場網路大爆炸，對外網路 1800ms 的延遲 XDD 比賽延後一小時開始，預料之內的因為主辦方更換，規則也跟著有所變動：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attack &amp;amp; Defense 的算分不再是零和制&lt;/li&gt;
&lt;li&gt;Attack point 打多少隊伍就得多少分&lt;/li&gt;
&lt;li&gt;Defense point 有成功擋住攻擊會獲得分數&lt;ul&gt;
&lt;li&gt;不太確定到底是怎麼判斷成功防禦，主辦方到第三天才把分數算對...應該算對了吧 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Sat, 18 Aug 2018 02:22:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2018-08-18:/defcon_26_other_summary.html</guid><category>DEF CON CTF</category></item><item><title>Plaid CTF 2018 Reverse 200 Plaid Adventure</title><link>https://ddaa.tw/plaidctf_reverse_200_plaid_adventure.html</link><description>&lt;p&gt;這題困難的地方都被 &lt;strong&gt;lucas&lt;/strong&gt; 逆完了 &amp;lt;(_ _)&amp;gt;&lt;br&gt;
不過有個小地方讓我們卡關超久...&lt;br&gt;
BTW，我覺得這題分數 200 分有點太少...  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;將題目給的檔案解開後，發現竟然是個 web service = =&lt;br&gt;
不過只是個靜態網頁，可以隨便用個 python http server 跑起來&lt;br&gt;
用 broswer 連上可以發現是個文字解謎的遊戲&lt;br&gt;
這種遊戲模式被稱為 &lt;a href="https://en.wikipedia.org/wiki/Interactive_fiction"&gt;Interactive fiction&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;遊戲開始後會進入一個迷宮&lt;br&gt;
迷宮不算複雜，正常的遊玩就可以把所有場景走一遍&lt;br&gt;
可以入手的道具有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;紅、藍、黃、綠 四色寶石各一顆&lt;/li&gt;
&lt;li&gt;大門鑰匙&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;獲得所有道具後前往某個有大門的場景&lt;br&gt;
用鑰匙打開門後，會有一台機器可以放置四色寶石&lt;br&gt;
依序放上後，出現 ... 的訊息&lt;br&gt;
猜測是要根據某個順序觸碰寶石&lt;br&gt;
到這邊就無法用正常的繼續遊戲，開始需要逆向遊戲的邏輯&lt;br&gt;
我大概花一個小時就過到這邊，接下來卡了十幾個小時...Orz  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;put …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Thu, 17 May 2018 04:04:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2018-05-17:/plaidctf_reverse_200_plaid_adventure.html</guid><category>PlaidCTF</category></item><item><title>0CTF 2018 Pwnable 478 Zer0 FS</title><link>https://ddaa.tw/0ctf_pwnable_478_zer0fs.html</link><description>&lt;p&gt;The problem was solved with &lt;strong&gt;jeffxx&lt;/strong&gt;, &lt;strong&gt;atdog&lt;/strong&gt; and &lt;strong&gt;lays&lt;/strong&gt;&lt;br&gt;
Most of exploit was written by &lt;strong&gt;atdog&lt;/strong&gt; during the competition and I rewrote the exploit for the write-up.  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;We will enter a shell that building by KVM after ssh connection enbalished. The discription said the flag is &lt;code&gt;sha256(/root/flag …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 06 Apr 2018 22:51:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2018-04-06:/0ctf_pwnable_478_zer0fs.html</guid><category>0CTF</category><category>Linux kernel</category></item><item><title>34C3CTF 2017 MISC 162 minbashmaxfun</title><link>https://ddaa.tw/34c3ctf_2017_misc_162_minbashmaxfun.html</link><description>&lt;p&gt;34C3 跟去年一樣是在上班時間舉辦&lt;br&gt;
沒什麼時間打，第二天的下班時間幾乎都在解這題&lt;br&gt;
這題應該是至今解過限制最多的 cmd injection 題目了...  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目會把我們的 input 丟到 &lt;code&gt;execl("/bin/bash", "/bin/bash", "-c", input, NULL)&lt;/code&gt; 執行&lt;br&gt;
但 input 只能包含以下字元：&lt;code&gt;$ ( ) # ! { } &amp;lt; \ '&lt;/code&gt;&lt;br&gt;
而且執行前會把 stdin 先關掉，無法交互執行指令&lt;br&gt;
（後面會說明這有多靠北 = =）&lt;br&gt;
原本以為是類似 &lt;a href="http://pwnable.kr"&gt;pwnable.kr&lt;/a&gt; 的 &lt;strong&gt;cmd3&lt;/strong&gt;&lt;br&gt;
可以拿以前的 payload 來用...果然是太天真了 QQ&lt;br&gt;
這題比起 &lt;strong&gt;cmd3&lt;/strong&gt; 更困難的地方在於連路徑都無法使用&lt;br&gt;
不過，解題思路還是有相似之處  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cmd3&lt;/strong&gt; 也限制了輸入英數字，但可以用 &lt;code&gt;$((a+b))&lt;/code&gt; 的方式做出各種數字&lt;br&gt;
這題連運算符號也限制了 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Thu, 04 Jan 2018 01:05:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2018-01-04:/34c3ctf_2017_misc_162_minbashmaxfun.html</guid><category>3XC3CTF</category><category>Bash</category><category>CMD Injection</category></item><item><title>Google CTF 2017 Crypto 201 RSA CTF Challenge</title><link>https://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html</link><description>&lt;p&gt;這題沒有解出來...不過學到很多關於 &lt;strong&gt;PKCS#1 v1.5&lt;/strong&gt; 的攻擊方式&lt;br&gt;
還是厚著臉皮寫了一篇 write up  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;PKCS#1 v1.5 是 RSA 的一種實際應用方式，詳細內容可以參考 RFC 2313&lt;sup id="fnref-rfc2313"&gt;&lt;a class="footnote-ref" href="#fn-rfc2313"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
目的是將訊息 padding 後構造成數位簽章或數位信封使用的格式，大概會長得這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Encryption&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; 
&lt;span class="n"&gt;BT&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Data&lt;/span&gt;

&lt;span class="n"&gt;EB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;BT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;PS&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本題是要找出是簽署 &lt;code&gt;challenge&lt;/code&gt; 這個字串的 signature &lt;br&gt;
因此接下來只看 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 26 Jun 2017 11:38:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2017-06-26:/gctf_crypto_201_rsa_ctf_challenge.html</guid><category>PKCS#1 v1.5</category><category>RSA</category><category>CVE</category><category>Google CTF</category></item><item><title>Trend Micro CTF 2017 write-ups</title><link>https://ddaa.tw/tmctf_misc_2400_write_ups.html</link><description>&lt;p&gt;Our team &lt;code&gt;phddaa&lt;/code&gt; (what the f...) got 2400 points and 19th rank this year.&lt;br&gt;
We didn't spend too much time on this game because we think the competition is 48 hours. O__O&lt;br&gt;
There are several categories of challenges but I don't know how they distinguish.&lt;br&gt;
Almost of challenges need to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Sun, 25 Jun 2017 20:01:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2017-06-25:/tmctf_misc_2400_write_ups.html</guid><category>Engima</category><category>Wireshark</category><category>Frequency Analysis</category><category>Other CTF</category></item><item><title>Codegate CTF 2017 prequals web+pwn 435 PNGParser</title><link>https://ddaa.tw/codegate_web+pwn_435_pngparser.html</link><description>&lt;p&gt;The challenges is more interesting than last year.&lt;br&gt;
However, why held the CTF on Friday? :(  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The problem description provided some website links for us. All of them are the same.&lt;br&gt;
There are two tags on the website. One of them is named &lt;code&gt;FILE UPLOAD&lt;/code&gt;, Another one is named &lt;code&gt;INTERNET&lt;/code&gt;.&lt;br&gt;
We …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 13 Feb 2017 11:34:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2017-02-13:/codegate_web+pwn_435_pngparser.html</guid><category>Codegate CTF</category><category>Stack Overflow</category><category>LFI</category></item><item><title>SECCON 2016 Binary+Crypto 200 Lost Decryption</title><link>https://ddaa.tw/seccon_re+crypto_200_lostdecryption.html</link><description>&lt;p&gt;這題是 pwn 題被大家掃光之後&lt;br&gt;
不得以之下只好來看的題目...&lt;br&gt;
Crypto is so difficult. Orz&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目給了三個檔案 &lt;strong&gt;cipher&lt;/strong&gt;, &lt;strong&gt;libencrypt.so&lt;/strong&gt;, &lt;strong&gt;flag.enc&lt;/strong&gt;&lt;br&gt;
cipher 沒辦法執行, 會噴出以下 error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./cipher: error while loading shared libraries: libdecrypt.so: cannot open shared object file: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把 cipher 丟到 ida pro 以後可以大致分析出行為:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Usage: cipher (encrypt|decrypt) key input output …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 13 Dec 2016 02:43:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2016-12-13:/seccon_re+crypto_200_lostdecryption.html</guid><category>SECCON CTF</category><category>Feistel Cipher</category></item><item><title>HITCON CTF 2016 crypto 150 OTP</title><link>https://ddaa.tw/hitcon_crypto_150_otp.html</link><description>&lt;p&gt;Sovled: 12 / 1024&lt;/p&gt;
&lt;p&gt;今年是第一次以出題方的身分參加 HITCON CTF&lt;br&gt;
一直很擔心自己的題目不夠水準&lt;br&gt;
有一點低估自己的題目難度了&lt;br&gt;
以解題人數來看, 這題應該可以加到 200 分  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;otp 的行為是接收使用者的明文&lt;br&gt;
隨機產生一組長度等於 明文 + flag 的 xor key&lt;br&gt;
透過 xor 加密 明文 + flag 並回傳給使用者&lt;br&gt;
並且可以選擇透過何種方式產生 xor key  &lt;/p&gt;
&lt;p&gt;這題主要考的是 &lt;strong&gt;CVE-2016-6316&lt;/strong&gt;&lt;br&gt;
libgcrypt 實作 PRNG 有缺陷&lt;br&gt;
導致每獲得 580 byte 之後, 就可以算出接下來的 20 byte&lt;br&gt;
在取得 random number 以後, 都會取目前 random pool 的部分內容做 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Thu, 13 Oct 2016 20:13:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2016-10-13:/hitcon_crypto_150_otp.html</guid><category>PRNG</category><category>CVE</category></item><item><title>BCTF 2016 crypto 200 Special RSA</title><link>https://ddaa.tw/bctf_crypto_200_special_rsa.html</link><description>&lt;p&gt;這題是很基本的 crypto 題目&lt;br&gt;
從有 94 隊解就知道了...= =&lt;br&gt;
不過我還是想了好久 QQ&lt;br&gt;
對現代密碼學實在不太擅長&lt;br&gt;
這次一邊解一邊研究模運算&lt;br&gt;
趁記憶深刻趕快寫這篇 write-up  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目雖然叫 &lt;strong&gt;Special RSA&lt;/strong&gt; 但是這題跟 RSA 其實沒有很大關連...&lt;br&gt;
還比較像 ElGamel encryption = =&lt;br&gt;
害我還跑去看 ElGamel 有什麼弱點 囧  &lt;/p&gt;
&lt;p&gt;題目給了四個檔案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;special_rsa.py&lt;/li&gt;
&lt;li&gt;msg.txt&lt;/li&gt;
&lt;li&gt;msg.enc&lt;/li&gt;
&lt;li&gt;flag.enc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;special_rsa.py&lt;/code&gt; 有 usage, 真好心 XD &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dada@ubuntu:~/bctf/special_rsa$ ./special_rsa.py&lt;br&gt;
usage: ./special_rsa.py enc …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 21 Mar 2016 20:13:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2016-03-21:/bctf_crypto_200_special_rsa.html</guid><category>XCTF</category><category>RSA</category></item><item><title>Boston Key Party CTF 2016 Reverse 3 Harvard Jit in my pants</title><link>https://ddaa.tw/bkpctf_reverse_3_jit_in_my_pants.html</link><description>&lt;p&gt;剛從成功嶺出來就撞上這場 CTF ... XD&lt;br&gt;
果然是醬油到爆&lt;br&gt;
雖然去成功嶺之前大概也差不多吧 囧  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目給了一個 elf 超混亂 看不懂&lt;br&gt;
但是包含了一些奇怪的字串&lt;br&gt;
丟去 google 可以發現這個 elf 是由 &lt;strong&gt;MyJIT&lt;/strong&gt; 寫成的程式&lt;br&gt;
&lt;a href=""&gt;MyJIt&lt;/a&gt;&lt;br&gt;
其實從題目名稱大概就猜得到這題是 just in time 生成的程式&lt;br&gt;
所以直接逆 elf 是很難看出程式邏輯的  &lt;/p&gt;
&lt;p&gt;第一件事情就是 dump 出程式實際在執行的 code&lt;br&gt;
先用 &lt;code&gt;ltrace&lt;/code&gt; 稍微看一下程式在幹麻&lt;br&gt;
經過一連串不知所云的 &lt;code&gt;malloc&lt;/code&gt; &amp;amp; &lt;code&gt;free&lt;/code&gt; 之後&lt;br&gt;
發現最後會用 &lt;code&gt;puts&lt;/code&gt; 印出 &lt;em&gt;NOPE.&lt;/em&gt;&lt;br&gt;
可以直接在 puts 下斷點&lt;br&gt;
會發現有一塊 rwx 的 memory 在 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 15 Mar 2016 23:00:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2016-03-15:/bkpctf_reverse_3_jit_in_my_pants.html</guid><category>BKPCTF</category></item><item><title>32C3CTF 2015 PWN 200 readme</title><link>https://ddaa.tw/32c3ctf_2015_pwn_200_readme.html</link><description>&lt;p&gt;這題被安博給攔胡了 T_T&lt;br&gt;
沒發現 rodata 有 flag 可以 leak XD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題一開始打開來看沒什麼頭緒&lt;br&gt;
然後一堆隊伍都秒解出來 = =&lt;br&gt;
嘗試塞很長的 payload 結果發生奇怪的 crash&lt;br&gt;
&lt;code&gt;__GI_getenv (name=0x7ffff7b9c26b "BC_FATAL_STDERR_",...&lt;/code&gt;&lt;br&gt;
於是把 &lt;code&gt;LIBC_FATAL_STDERR&lt;/code&gt; 當成關鍵字丟進 google&lt;br&gt;
找到一篇韓國 conference &lt;em&gt;inc0gnito&lt;/em&gt; 的 &lt;a href="http://inc0gnito.com/Inc0gnito/ssp.pdf"&gt;pdf&lt;/a&gt;&lt;br&gt;
裡面有提到觸發 stack guard 以後&lt;br&gt;
可以透過覆蓋環境變數 leak memory  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# sysdeps/unix/sysv/linux/libc_fatal.c
/* Open a descriptor for /dev/ttyunless the user explicitly …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Thu, 31 Dec 2015 18:21:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-12-31:/32c3ctf_2015_pwn_200_readme.html</guid><category>3XC3CTF</category><category>Stack Overflow</category><category>Trick</category></item><item><title>HITCON 2015 PWN 200 blinkroot</title><link>https://ddaa.tw/hitcon_pwn_200_blinkroot.html</link><description>&lt;p&gt;這次也是一題都沒解出來&lt;br&gt;
大概是沒天份吧&lt;br&gt;
不過其實後來知道怎麼偽造 link_map 以後&lt;br&gt;
比賽期間寫的 payload 一度已經很接近了...&lt;br&gt;
只是後來方向錯了 Orz...   &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題的程式非常簡單&lt;br&gt;
pseudo code 長這樣:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;char data[1024];
int main()
{
    if (recvlen(0, data, 1024) == 1024) {
        close(0);
        close(1);
        close(1);
        data[(int)data] = (int128)(0x1000000000 | data[8]);
        puts(data[16]);
    }
    exit(0);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前八個 byte 可以任意控制&lt;br&gt;
所以會造成任意寫值的問題
這題不知道用什麼方式&lt;br&gt;
組合語言是透過 xmm0 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 20 Oct 2015 01:23:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-10-20:/hitcon_pwn_200_blinkroot.html</guid><category>HITCON CTF</category><category>dl_resolve</category></item><item><title>CSAW CTF 2015 web 500 Weebdate</title><link>https://ddaa.tw/csawctf_web_500_weebdate.html</link><description>&lt;p&gt;這題能解出來要歸功於&lt;br&gt;
&lt;strong&gt;ding&lt;/strong&gt;, &lt;strong&gt;happyholic1203&lt;/strong&gt;, &lt;strong&gt;mangoking&lt;/strong&gt;, &lt;strong&gt;jpeanut&lt;/strong&gt;&lt;br&gt;
已經把前面的問題都找出了&lt;br&gt;
我其實只是撿尾刀而已...  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不過還是厚著臉皮寫一下 write up&lt;br&gt;
不然這邊 web 分類文章都空空蕩蕩...  &lt;/p&gt;
&lt;p&gt;這題的背景故事是&lt;br&gt;
有一個叫做 &lt;strong&gt;Donald Trump&lt;/strong&gt; 的傢伙在這個交友網站註冊了帳號&lt;br&gt;
用來當作販毒的聯絡管道云云&lt;br&gt;
需要破出他的二段式認證 (&lt;code&gt;password&lt;/code&gt; + &lt;code&gt;TOTPKEY&lt;/code&gt;) 登入他的帳號&lt;br&gt;
這題的 &lt;code&gt;flag = md5(TOTPKEY + password)&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這個交友網站除了一般的帳號密碼以外&lt;br&gt;
還需要填入 oath 解 &lt;code&gt;TOTPKEY&lt;/code&gt; 的結果才能成功登入&lt;br&gt;
可以用以下指令來解:&lt;br&gt;
&lt;code&gt;oathtool --base32 --totp AAAAAAAAAAAA&lt;/code&gt;&lt;br&gt;
得到的結果是一個 6 位數字&lt;br&gt;
會隨時間改變, 所以要趕快登入 XDD&lt;br&gt;
註冊的時候試了一下如果帳號前四碼相同&lt;br&gt;
&lt;code&gt;TOTPKEY&lt;/code&gt; 得到的結果都一樣&lt;br&gt;
一開始以為只要註冊前面開頭一樣的帳號&lt;br&gt;
就可以拿到 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 22 Sep 2015 00:24:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-09-22:/csawctf_web_500_weebdate.html</guid><category>CSAWCTF</category><category>LFI</category><category>SQL Injection</category></item><item><title>CSAW CTF 2015 pwn 500 rhinoxorus</title><link>https://ddaa.tw/csawctf_pwn_500_rhinoxorus.html</link><description>&lt;p&gt;想說這次 CSAW 從比較難的題目開始解&lt;br&gt;
結果 ida 打開一分鐘就看到洞了 囧&lt;br&gt;
不過 exploit 還是寫個 3 小時左右吧&lt;br&gt;
挺煩人的...&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題的程式行為就是不斷的做 function call&lt;br&gt;
有 256 個不同的 function&lt;br&gt;
buf 大小不太一樣, 行為卻都類似&lt;br&gt;
毫無意義可言....
程式碼大概長這樣:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void func_2a(char *a1, int a2)
{
    char buf[100];
    int len = a2 - 1;
    ...
    if (len) {
        for (i = 0; i &amp;lt; len; i++)
            buf ^= a1[i];
        func_array …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 21 Sep 2015 21:23:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-09-21:/csawctf_pwn_500_rhinoxorus.html</guid><category>CSAWCTF</category><category>Stack Overflow</category></item><item><title>honeyme 2015 CTF CVE-2015-3306</title><link>https://ddaa.tw/honeyme_pwn_cve_2015_3306.html</link><description>&lt;p&gt;這次比賽前一天好像吃壞肚子...&lt;br&gt;
結果隔天遲到 將近 12 點才到會場&lt;br&gt;
很擔心會不會到現場題目已經被 &lt;strong&gt;Orange&lt;/strong&gt; 解光了 (誤&lt;br&gt;
還好還是有解貢獻一點分數 XD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;honeyme 是採 &lt;strong&gt;King of the Hill&lt;/strong&gt; 的賽制&lt;br&gt;
參賽隊伍要想辦法把主機首頁給換掉&lt;br&gt;
寫進自己的 token&lt;br&gt;
就可以有源源不絕的分數了~&lt;/p&gt;
&lt;p&gt;其中 ip .194 這台主辦方出的漏洞是利用 &lt;code&gt;CVE-2015-3306&lt;/code&gt;&lt;br&gt;
一個 Proftpd 的邏輯漏洞&lt;br&gt;
在 &lt;code&gt;Proftpd&lt;/code&gt; 啟用 &lt;code&gt;mod_copy&lt;/code&gt; 模組的請況下&lt;br&gt;
允許攻擊者在尚未認證的情況下任意對檔案進行讀寫&lt;br&gt;
可以用以下的程式碼驗證 ftp server 是否存在漏洞:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;220 ProFTPD 1.3.4a Server (ProFTPD Default Installation) [127 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Sat, 22 Aug 2015 12:49:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-08-22:/honeyme_pwn_cve_2015_3306.html</guid><category>Other CTF</category><category>CVE</category></item><item><title>CAMPCTF 2015 Pwn 300 datenklo manager</title><link>https://ddaa.tw/campctf_pwn_300_dkm.html</link><description>&lt;p&gt;這次的 pwn 題型都很和善&lt;br&gt;
這題應該是裡面最難的一題 (?&lt;br&gt;
至少對我來說 heap 還是很難解 OTZ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目跟一般 heap 題差不多&lt;br&gt;
一個選單有數樣功能:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;List DK&lt;/li&gt;
&lt;li&gt;Add DK&lt;/li&gt;
&lt;li&gt;Edit DK&lt;/li&gt;
&lt;li&gt;Delete DK&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DK 又分成兩種類型: &lt;code&gt;with wifi&lt;/code&gt;, &lt;code&gt;without wifi&lt;/code&gt;&lt;br&gt;
這個程式用到的結構如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;struct DK_base {
    long lg;
    long la;
    void *show_ptr;
    void *edit_ptr;
};

struct DK_with_wifi {
    DK_base base;
    char* ssid[32];
    char comment[1024];
};

struct DK_without_wifi …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 21 Aug 2015 13:29:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-08-21:/campctf_pwn_300_dkm.html</guid><category>Other CTF</category><category>Heap Overflow</category></item><item><title>0CTF 2015 Exploit 250 FlagGenerator</title><link>https://ddaa.tw/0ctf_exploit_250_flaggenerator.html</link><description>&lt;p&gt;這題的名稱叫 &lt;em&gt;FlagGenerator&lt;/em&gt;&lt;br&gt;
可惜沒辦法生出其他題的 flag ... XD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;執行程式後看到 menu 長這樣:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;== 0ops Flag Generator ==&lt;br&gt;
1. Input Flag&lt;br&gt;
2. Uppercase&lt;br&gt;
3. Lowercase&lt;br&gt;
4. Leetify&lt;br&gt;
5. Add Prefix&lt;br&gt;
6. Output Flag&lt;br&gt;
7. Exit&lt;br&gt;
=========================&lt;br&gt;
Your choice:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打開 &lt;strong&gt;ida pro&lt;/strong&gt; 快速檢查&lt;br&gt;
flag 的長度限制為 256 byte&lt;br&gt;
但是 &lt;em&gt;Leetify&lt;/em&gt; 的功能會造成 bof&lt;br&gt;
原因是 &lt;em&gt;Leetify&lt;/em&gt; 會將字串內的 &lt;em&gt;H&lt;/em&gt; 或是 &lt;em&gt;h&lt;/em&gt; 字元取代成 &lt;em&gt;1-1 …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 03 Apr 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-04-03:/0ctf_exploit_250_flaggenerator.html</guid><category>XCTF</category><category>Stack Overflow</category></item><item><title>0CTF 2015 Exploit 300 login</title><link>https://ddaa.tw/0ctf_exploit_300_login.html</link><description>&lt;p&gt;這題跟 &lt;strong&gt;yench&lt;/strong&gt; 討論&lt;br&gt;
至少省下我一個小時突破盲點 XD&lt;br&gt;
上學期辛苦開程式安全終於感覺有回饋了 QQ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題是考 &lt;strong&gt;format string vulnerability&lt;/strong&gt;&lt;br&gt;
執行程式要我們輸入帳密&lt;br&gt;
打開 &lt;strong&gt;ida pro&lt;/strong&gt; 很容易就知道帳密多少&lt;br&gt;
輸入 &lt;em&gt;guest / guest123&lt;/em&gt; 以後成功登入&lt;br&gt;
接著有三個功能可以選擇:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;== 0CTF Login System ==&lt;br&gt;
1. Show Profile&lt;br&gt;
2. Login as User&lt;br&gt;
3. Logout&lt;br&gt;
=======================&lt;br&gt;
Your choice:  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但其實還有一個隱藏功能 &lt;em&gt;4&lt;/em&gt;&lt;br&gt;
必須讓自己的身分變成 &lt;em&gt;normal&lt;/em&gt; 才能觸發&lt;br&gt;
功能 4 是登入成 &lt;em&gt;root&lt;/em&gt; 的功能&lt;br&gt;
裡面有兩個很明顯的 &lt;code&gt;printf(buf)&lt;/code&gt;&lt;br&gt;
所以首先我們要讓自己的身份從 &lt;em&gt;guest …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 03 Apr 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-04-03:/0ctf_exploit_300_login.html</guid><category>XCTF</category><category>Off-by-one</category><category>Format String</category></item><item><title>Codegate CTF 2015 pwn 1000 sokoban</title><link>https://ddaa.tw/codegate_pwn_1000_sokoban.html</link><description>&lt;p&gt;The challenge is a game that called &lt;strong&gt;sokoban&lt;/strong&gt;. lol&lt;br&gt;
After we passed the first levels, we entered a menu and were able to choose the game mode.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The menu looked like:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Go to random infinite challenge mode  &lt;/li&gt;
&lt;li&gt;Go to next stage  &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we opened IDA pro and reversed the binary …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 24 Mar 2015 12:55:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-03-24:/codegate_pwn_1000_sokoban.html</guid><category>Codegate CTF</category><category>Off-by-one</category></item><item><title>Boston Key Party CTF 2015 Pwn 275 Harvard Square</title><link>https://ddaa.tw/bkpctf_pwn_275_harvard_square.html</link><description>&lt;p&gt;This problem was worth 275 pts, but I thought it is easier than other red problems. XD&lt;br&gt;
We could reverse it happily beacuse the programe wasn't stipped.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The problem is a game about transcation of 0days.&lt;br&gt;
We could enter the password and cheated the game, but it's useless. XD&lt;br&gt;
After …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 02 Mar 2015 01:50:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2015-03-02:/bkpctf_pwn_275_harvard_square.html</guid><category>BKPCTF</category><category>Stack Overflow</category></item><item><title>9447 CTF 2014 pwn 420 classy</title><link>https://ddaa.tw/9447ctf_pwn_420_classy.html</link><description>&lt;p&gt;這題看了十個小時多卻沒解出來&lt;br&gt;
實在是很挫敗......&lt;br&gt;
不過還是覺得這題該寫個 write up 紀錄&lt;br&gt;
下次才不會一樣進入思維誤區  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題是 binary 是用 C++ 寫的&lt;br&gt;
還包含了一些 libary function&lt;br&gt;
程式規模非常大 要每個 function 都看過不太可能  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 非常簡單&lt;br&gt;
進行 io redirect 和一些參數的檢查&lt;br&gt;
接著就進入兩個關鍵的 function&lt;br&gt;
&lt;code&gt;parse_file_or_die()&lt;/code&gt; 以及 &lt;code&gt;gogo()&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;這兩個 function 都十分複雜&lt;br&gt;
而且又用了不少動態跳躍&lt;br&gt;
即使用 ida pro 翻成 pseudo code 也不完整&lt;br&gt;
很難完全看懂&lt;br&gt;
用動態分析其行為得到結果是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parse_file_or_die()&lt;/code&gt;
    讀入一個 java class，如果格式有誤或者使用了不允許的動作都會發生 exception 並結束 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Thu, 04 Dec 2014 14:22:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-12-04:/9447ctf_pwn_420_classy.html</guid><category>Other CTF</category><category>VM Executable</category></item><item><title>CSAW CTF 2014 pwn 300 ish</title><link>https://ddaa.tw/csawctf_pwn_300_ish.html</link><description>&lt;p&gt;接觸 CTF 一年整了...&lt;br&gt;
好像進步很多 卻又好像什麼都一樣 (嘆&lt;br&gt;
最後 400 分體力不支了&lt;br&gt;
隔天才解出有點可惜 QQ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;ish&lt;/em&gt; 是一個模擬 shell 的程式&lt;br&gt;
有以下幾個指令：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;ls&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cat&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ping&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;admin&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;login&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;run&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sleep&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;lotto&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;quote&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;run&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;exit&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把程式都看過一遍以後&lt;br&gt;
比較可疑的有 &lt;em&gt;cat&lt;/em&gt;、&lt;em&gt;run&lt;/em&gt;、&lt;em&gt;login&lt;/em&gt;、&lt;em&gt;lotto&lt;/em&gt;&lt;br&gt;
其他都毫無意義  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;cat&lt;/em&gt; 會去開一個檔案&lt;br&gt;
但是開啟參數有問題&lt;br&gt;
檔案不存在就會生一個出來...已存在就會回傳錯誤直接 return  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;run&lt;/em&gt; 是把指令切割後&lt;br&gt;
第一個參數丟到 &lt;code&gt;system&lt;/code&gt; 呼叫&lt;br&gt;
不過第一個參數一定是 &lt;em&gt;run&lt;/em&gt;...&lt;br&gt;
依然無法利用  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;login&lt;/em&gt; 會再開一次 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 23 Sep 2014 09:23:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-09-23:/csawctf_pwn_300_ish.html</guid><category>CSAWCTF</category><category>Uninitialized</category></item><item><title>HITCON CTF 2014 pwn 150 rsbo</title><link>https://ddaa.tw/hitcon_pwn_150_rsbo.html</link><description>&lt;p&gt;這題是 32 bit 的 elf&lt;br&gt;
程式規模很小&lt;br&gt;
很容易就看完了  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;試一下超長字串就發現程式會 crash&lt;br&gt;
仔細看是因為 &lt;code&gt;read_80_bytes()&lt;/code&gt; buffer overflow&lt;br&gt;
buffer 長度 80 實際讀入 0x80 ...&lt;br&gt;
我一開始的確沒注意 XDD  &lt;/p&gt;
&lt;p&gt;crash 的原因是因為 ret 被蓋掉&lt;br&gt;
蓋完 ret 以後還有 16 byte 的長度可以利用&lt;br&gt;
這題有 dep + ASLR 的保護&lt;br&gt;
所以沒辦法知道要跳到哪&lt;br&gt;
此外，輸入的內容會隨機被打亂&lt;br&gt;
我們沒辦法讓 ret 正確變成我們希望的內容  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;size = read_80_bytes(buf);
for ( i = 0; i &amp;lt; size; ++i )
{
    v3 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 18 Aug 2014 23:01:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-08-18:/hitcon_pwn_150_rsbo.html</guid><category>HITCON CTF</category><category>Stack Overflow</category></item><item><title>DEF CON 22 CTF Final summary</title><link>https://ddaa.tw/defcon_other_summary.html</link><description>&lt;p&gt;&lt;strong&gt;===WARNING===&lt;/strong&gt;
這篇文章廢話超多......&lt;br&gt;
若要看比賽細節請直接跳至 &lt;strong&gt;8/8&lt;/strong&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;8/5&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;必須說這次的出國真的很刺激&lt;br&gt;
首先是 orange 的簽證填錯護照號碼 XD&lt;br&gt;
過安檢的時候 jery 背包的一堆給溪都被丟掉了&lt;br&gt;
到 SFO 之後 sean 和 jery 過海關時不知為何被攔下&lt;br&gt;
好險長榮的工作人員去解圍&lt;br&gt;
經過一番波折終於抵達 las vegas&lt;br&gt;
在搭機場到飯店的接駁車上&lt;br&gt;
深深為 strip 的夜景感到驚豔  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TT: 就是 unix 那個 strip  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可惜相機還放在行李箱裡 Orz&lt;br&gt;
抵達飯店 RIO 以後跟 GD 會合&lt;br&gt;
在等待 checkin 的時間把一樓賭場逛了逛&lt;br&gt;
有種劉姥姥進大觀園的感覺~&lt;br&gt;
回飯店放完行李就出發覓食&lt;br&gt;
最後吃了漢堡王...好貴&lt;br&gt;
不過份量也很大 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 13 Aug 2014 18:34:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-08-13:/defcon_other_summary.html</guid><category>DEF CON CTF</category></item><item><title>Pwnium CTF 2014 pwn 200 Be a robot</title><link>https://ddaa.tw/pwnium_pwn_200_be_a_robot.html</link><description>&lt;p&gt;Pwnium CTF....but there is only one pwn problem. lol&lt;br&gt;
(pwn100 was down.)  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The problem gave us a host that we can login by ssh and do something.&lt;br&gt;
Our goal is using the executable named &lt;code&gt;pwn200&lt;/code&gt; to get the content of file named &lt;code&gt;flag&lt;/code&gt; under the same directory.  &lt;/p&gt;
&lt;p&gt;After using …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 11 Jul 2014 22:59:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-07-11:/pwnium_pwn_200_be_a_robot.html</guid><category>Other CTF</category><category>Uninitialized</category></item><item><title>Secuinside ctf 2014 reverse 100 find key</title><link>https://ddaa.tw/secuinside_reverse_100_find_the_key.html</link><description>&lt;p&gt;這題是快要結束才開出來的一題 reverse&lt;br&gt;
到結束也沒人解出來 ORZ&lt;br&gt;
稱假日有點時間還是把它解出來了...  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目是一個 32 bit 的 elf&lt;br&gt;
執行需要輸入兩個參數&lt;br&gt;
題目會先對第一個參數做檢查  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./findkey 123 123&lt;br&gt;
key 1 = 123&lt;br&gt;
0 is differnce&lt;br&gt;
Wrong password  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很快找到檢查第一個參數的 function 在 &lt;code&gt;0x0804b76d&lt;/code&gt;&lt;br&gt;
trace 完後這個 func 的演算法是：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sub_804b76d(arg1,n=0x31):
    for i in range(56):
        v7 = 0
        v4 = len(sentence[i])
        v2 = smaller(n …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 09 Jun 2014 02:46:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-06-09:/secuinside_reverse_100_find_the_key.html</guid><category>Other CTF</category></item><item><title>Secuinside ctf 2014 pwn 300 yet-another-javascript-jail</title><link>https://ddaa.tw/secuinside_pwn_300_yet_another_js_jail.html</link><description>&lt;p&gt;這題沒解出來 QQ&lt;br&gt;
找錯 CVE 真是太囧了&lt;br&gt;
如果找對個應該是有機會可以解出來吧...  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題是一個 javascipt 的 jail 環境&lt;br&gt;
可以任意執行一些 js 的指令&lt;br&gt;
part1 dm4 秒殺了 XD&lt;br&gt;
做法是 overwrite &lt;code&gt;Array.prototype.toString&lt;/code&gt;&lt;br&gt;
過 part1 以後得到一個 elf&lt;br&gt;
不看還好...reverse 以後嚇一跳&lt;br&gt;
根本就是一個 v8 engine = =  &lt;/p&gt;
&lt;p&gt;比對 &lt;code&gt;RunShell()&lt;/code&gt; 和 example code 以後&lt;br&gt;
沒看到什麼能利用的地方&lt;br&gt;
初步判定洞是在 v8 裡面&lt;br&gt;
而且上一題的 jsjail 版本比較新&lt;br&gt;
就猜這題的解法應該跟 cve 有關&lt;br&gt;
結果找錯個 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 06 Jun 2014 03:33:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-06-06:/secuinside_pwn_300_yet_another_js_jail.html</guid><category>Other CTF</category><category>CVE</category></item><item><title>DEF CON 22 CTF Quals Baby's First heap</title><link>https://ddaa.tw/defcon_pwn_baby_first_heap.html</link><description>&lt;p&gt;這題是第一天在看的&lt;br&gt;
在嘗試做 payload 時 &lt;strong&gt;jeffxx&lt;/strong&gt; 就解完啦 XD&lt;br&gt;
不過還是厚著臉皮寫一下 write up  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;連上去環境後得到這樣的訊息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to your first heap overflow...&lt;br&gt;
I am going to allocate 20 objects...&lt;br&gt;
Using Dougle Lee Allocator 2.6.1...&lt;br&gt;
Goodluck!&lt;br&gt;
Exit function pointer is at 804C8AC address.&lt;br&gt;
[ALLOC][loc=9DE4008][size=1246]&lt;br&gt;
[ALLOC][loc=9DE44F0][size=1121]&lt;br&gt;
...&lt;br&gt;
Write …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 20 May 2014 01:31:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-05-20:/defcon_pwn_baby_first_heap.html</guid><category>DEF CON CTF</category><category>Heap Overflow</category></item><item><title>ASIS CTF Crypto 150 Random Image</title><link>https://ddaa.tw/asisctf_crypto_150_random_image.html</link><description>&lt;p&gt;I didn't spend a lot of time at this CTF because I need to present my project about openstack. 217 is very powerful. When I joined the game, most of problems have been solved. I tried to solve the problem &lt;strong&gt;easy reading&lt;/strong&gt;, but finally it was fruitless. (Nobody solved it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Fri, 16 May 2014 22:16:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-05-16:/asisctf_crypto_150_random_image.html</guid><category>Other CTF</category></item><item><title>Dragon Sector CTF 2014 Pwnable200</title><link>https://ddaa.tw/dsctf_pwn_200_calc_machine.html</link><description>&lt;p&gt;I almost forget how to use format string vulnerability attack......  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;After connecting the server, we can get the message like that:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to Multipurpose Calculation Machine!&lt;br&gt;
Menu:&lt;br&gt;
  add:  Addition&lt;br&gt;
  sub:  Subtraction&lt;br&gt;
  mul:  Multiplication&lt;br&gt;
  div:  Division&lt;br&gt;
  pow:  Power&lt;br&gt;
  mod:  Modulo&lt;br&gt;
  sin:  Sinus&lt;br&gt;
  cos:  Cosinus&lt;br&gt;
  tan:  Tangens&lt;br&gt;
  cot:  Cotangens&lt;br&gt;
  quit&lt;br&gt;
Choice: add …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 29 Apr 2014 03:15:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-04-29:/dsctf_pwn_200_calc_machine.html</guid><category>Other CTF</category><category>Format String</category></item><item><title>Plaid CTF 2014 Crypto 250 Parlor</title><link>https://ddaa.tw/plaidctf_crypto_250_parlor.html</link><description>&lt;p&gt;這題是 217 的大大們解出來的&lt;br&gt;
我知道關鍵後&lt;br&gt;
隔天才自己做一遍&lt;br&gt;
寫程式太慢了.........  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題連到目標環境後敘述如下：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/------------------------------------------------------------------------------\
| Welcome to the betting parlor!                                               |
|                                                                              |
| We implement State of the Art cryptography to give you the fairest and most  |
| exciting betting experience!                                                 |
|                                                                              |
| Here&amp;#39;s how it works: we both pick a nonce, you tell us odds, and you give us |
| some money.                                                                  |
| If …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Thu, 17 Apr 2014 10:37:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-04-17:/plaidctf_crypto_250_parlor.html</guid><category>PlaidCTF</category><category>Length Extension Attack</category></item><item><title>Plaid CTF 2014 Crypto 20 twenty</title><link>https://ddaa.tw/plaidctf_crypto_20_twenty.html</link><description>&lt;p&gt;Try using English to write the solution down.&lt;br&gt;
However, my English is not so good.&lt;br&gt;
I hope to improve it through this method. :)  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The problem gave us a bzip2 file. We get the cipher in &lt;code&gt;twenty.txt&lt;/code&gt; after extracting it.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fvoxoxfvwdepagxmwxfpukleofxhwevefuygzepfvexwfvufgeyfryedojhwffoyhxcwgmlxeylawfxfurwfvoxecfezfvwbecpfpeejuygoyfefvwxfpwwfxojumwuxfuffvwawuxflecaazubwjwoyfvwyepfvwuxfhwfjlopwckaohvfjlzopwoaahevupgwpfvuywjoywjdwyfufjupouvbuaajwuaoupkecygjwoyfvwuxxdofvyeacmwbvuzoyhlecpwzcbroyhdofvfvwgcgwdveheffvwrwlxfelecpxuzwuygfvexwfvufbuyfgempoyhxcofxbplfelecpcybawxujfexwffawgoxkcfwxfvechvflecgfubrawfvoxdofvuaoffawjepwfubfmcffvwyuhuoyzcghwkubrwpxogeyfryediubroxvwgufwupwswplfojwofvoyrezaorxuyhmcfxvofjuyfvwlpwubepkepufoeyuygojukwpxeyozobufoeyezzpwwgejzepuaaleczoaagebrwfxaorwfvufxubeybwkfzepwohyfeluaadvoawaudlwpxjcggldufwpuygfpexxfuaaecfezmcxoywxxoxiuoazepjwuyglecpwxcoyhjwbosoaalwnvomoffvoxoyfvwbecpfpeejheeygeofogupwlecbeyhpufcaufoeyxfvwzauhoxxoybwywdbplkfejohvfvuswyxumubrgeepxocxweagbplkfe&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I didn't notice this text is encrypted by replacing …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 15 Apr 2014 00:34:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-04-15:/plaidctf_crypto_20_twenty.html</guid><category>PlaidCTF</category><category>Substitution Cipher</category></item><item><title>ACTF 2014 Crypto 老大哥aay的秘密</title><link>https://ddaa.tw/actf_forensic_100_aay_secret.html</link><description>&lt;p&gt;期中考完了來補一下 ACTF write up&lt;br&gt;
打完 plaidctf 覺得自己跟 學長 Orange 217 等大大&lt;br&gt;
差距十分之大 Orz&lt;br&gt;
要花更多時間練習才行 QQ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題給了一個 rar 的檔案&lt;br&gt;
裡面包含 7 個檔案，每個 5 byte&lt;br&gt;
猜測應該是可以從 CRC32 brute-force 出結果&lt;br&gt;
測試一下&lt;br&gt;
&lt;code&gt;echo -ne 'ACTF' &amp;gt; tmp; crc32 tmp; cat tmp&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;76f37a57  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;跟 rar 的檔案吻合&lt;br&gt;
應該可以確認猜測無誤  &lt;/p&gt;
&lt;p&gt;接著要去 survey CRC32 的算法&lt;br&gt;
結果就找到現成的 code&lt;br&gt;
[http://www …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 14 Apr 2014 21:19:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-04-14:/actf_forensic_100_aay_secret.html</guid><category>XCTF</category></item><item><title>Cyber Readiness Challenge 2014 Level 1 Summary</title><link>https://ddaa.tw/cyber_readiness_challenge_level1_summary.html</link><description>&lt;p&gt;今天跟 &lt;strong&gt;jeffxx&lt;/strong&gt; 和 &lt;strong&gt;atdog&lt;/strong&gt; 參加賽門鐵克主辦的 CTF&lt;br&gt;
見識到好多平常只有在網路上看過 id 的 大大 (worship)&lt;br&gt;
題目還滿有趣的~ 從中學到不少東西&lt;br&gt;
希望以後還會有機會參加 XD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;故事背景是一個因為咖啡廳漲價而心生不滿的中二顧客&lt;br&gt;
決定黑咖啡廳的網路當作報復 (誤  &lt;/p&gt;
&lt;p&gt;題目環境給了一個 ip &lt;em&gt;10.1.1.10&lt;/em&gt;&lt;br&gt;
連過去會到咖啡廳的網站&lt;br&gt;
(因為題目環境是封閉的 所以只能稍微記錄一下做法了 &amp;gt;&amp;lt;)  &lt;/p&gt;
&lt;h2&gt;Problem 1 300&lt;/h2&gt;
&lt;p&gt;這題敘述是要找出咖啡廳是用什麼軟體架設的&lt;br&gt;
點開 source code 就看到註解裡面有記錄了&lt;br&gt;
flag: 忘了  &lt;/p&gt;
&lt;h2&gt;Problem 2 500&lt;/h2&gt;
&lt;p&gt;這題是要找到一個還沒使用過的優惠券&lt;br&gt;
點到網頁 &lt;em&gt;deals&lt;/em&gt; 的分類會看到兩個優惠券&lt;br&gt;
當然都不是 flag&lt;br&gt;
url 大概長這樣 &lt;code&gt;http://10 …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 02 Apr 2014 22:51:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-04-02:/cyber_readiness_challenge_level1_summary.html</guid><category>Other CTF</category></item><item><title>VolgaCTF 2014 Crypto 100 Crypto100</title><link>https://ddaa.tw/volgactf_crypto_100_crypto100.html</link><description>&lt;p&gt;crypto 只有解出 100 分而已&lt;br&gt;
其他都沒解出來...&lt;br&gt;
早知道去解別題了 ORZ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;密文是一個超級大的數字...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;190569475701019412937705231680700513465015462478574872080026036707049434285377110377581884338050290774147519326077986327023814459562710938989987601622114027649584411501029597442404380535706287506751810630518137180840386095680950172667823654745784065
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;題目還有給一個遠端的加密程式&lt;br&gt;
試了一下規則有：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非英文字母都 = 1 &lt;/li&gt;
&lt;li&gt;英文字母不分大小寫&lt;/li&gt;
&lt;li&gt;a=4, b=9, c=25, d=49, ..., z=10201&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很輕易可以看出來對應的數字就是質數的平方&lt;br&gt;
但是如果兩個字元以上就還有一些變化&lt;br&gt;
ex： &lt;em&gt;a=4, aa=32, aaa=1024, aaaa=131072&lt;/em&gt;&lt;br&gt;
收集一些密文後可以推得遞迴式：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;F(d) = F(d-1) * prime[c] ^ 2 * prime[c] ^ prime[d]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;prime[] = 質數陣列, 2 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 31 Mar 2014 01:14:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-31:/volgactf_crypto_100_crypto100.html</guid><category>Other CTF</category></item><item><title>VolgaCTF 2014 Exploit 100 Exploit100</title><link>https://ddaa.tw/volgactf_exploit_100_exploit100.html</link><description>&lt;p&gt;突然被揪來玩的一次ctf XDD&lt;br&gt;
結果說好的養身又沒了 OTZ&lt;br&gt;
這次想嘗試解比較難的題目&lt;br&gt;
結果就是 very not work ....&lt;br&gt;
希望下次能解些分數比較高的題目 QQ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一樣先看題目環境:   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The password consists of 12 printable characters&lt;br&gt;
111111111111&lt;br&gt;
344  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;while(1){
  ...
  if ( v5 == 12 )
      break;
    v7 = rand() % 1000;
    for ( j = 0; j &amp;lt; v5; ++j )
    {
      for ( k = 1; (unsigned int)k &amp;lt;= 0xDEADBEEE; ++k )
        v7 = k ^ (k + v7);
    }
    sprintf(&amp;amp;s …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 31 Mar 2014 00:48:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-31:/volgactf_exploit_100_exploit100.html</guid><category>Other CTF</category></item><item><title>BCTF 2014 PWN 100 後門程序</title><link>https://ddaa.tw/bctf_pwn_100_backdoor.html</link><description>&lt;p&gt;這題算是很基本的 pwn&lt;br&gt;
但是可能因為中間有點小陷阱&lt;br&gt;
所以解出來的人不多 (?  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;連到目標環境後會印出一堆歌詞 (?&lt;br&gt;
輸入 n 就離開程式，不然會在印一次歌詞  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...&lt;br&gt;
Drink all the booze&lt;br&gt;
Hack all the things  &lt;/p&gt;
&lt;p&gt;Replay?(y/n)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;檢查程式以後&lt;br&gt;
程式有故意留下的 backdoor&lt;br&gt;
只要 input 符合條件&lt;br&gt;
就會跳轉到 buf 執行 shellcode&lt;br&gt;
行為如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判斷 input 第一個字是否為 'n' or 'N'，是則終止程式  &lt;/li&gt;
&lt;li&gt;將 input 與 &lt;code&gt;&amp;lt;baidu-rocks,froM-china-with-love&amp;gt;&lt;/code&gt; 做 xor 加密  &lt;/li&gt;
&lt;li&gt;如果 xor 後前面 10 …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 12 Mar 2014 18:12:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-12:/bctf_pwn_100_backdoor.html</guid><category>XCTF</category></item><item><title>BCTF 2014 PPC &amp; CRYPTO 100 混沌密碼鎖</title><link>https://ddaa.tw/bctf_crypto_100_password_lockstitch.html</link><description>&lt;p&gt;百度 CTF blue-lotus 辦的&lt;br&gt;
個人覺得題目還滿有趣的&lt;br&gt;
不過到處都是置入性行銷 XD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;環境是用 python 寫的一個伺服器&lt;br&gt;
先試試看要我們幹嘛：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to Secure Passcode System&lt;br&gt;
First, please choose function combination:&lt;br&gt;
f1: 1&lt;br&gt;
f2: 2&lt;br&gt;
f3: 3&lt;br&gt;
f4: 4&lt;br&gt;
Wrong function combination, you bad guy!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;trace 原始碼得知&lt;br&gt;
輸入的四個數字會對應到四個 function&lt;br&gt;
並以輸入的順序將 answer 解密  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f[&amp;#39;fun1&amp;#39;]=reverse
f[&amp;#39;fun2&amp;#39;]=base64.b64decode
f …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 12 Mar 2014 02:26:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-12:/bctf_crypto_100_password_lockstitch.html</guid><category>XCTF</category><category>Collision</category></item><item><title>Boston Key Party CTF 2014 Crypto 200 MITM II: Electric Boogaloo</title><link>https://ddaa.tw/bkpctf_crypto_200_200_mitm_ii_electric_boogaloo.html</link><description>&lt;p&gt;這題還滿簡單的&lt;br&gt;
解法就是題目名稱 = =&lt;br&gt;
可是不知道為什麼很少人解出來&lt;br&gt;
可能是太晚出來被大家忽略吧 0.0  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目敘述如下：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chisa and Arisu are trying to tell each other two halves of a very important secret! They think they're safe, because they know how cryptography works---but can you learn their terrible, terrible secret? They're available as services at 54.186.6.201:12346 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 03 Mar 2014 16:48:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-03:/bkpctf_crypto_200_200_mitm_ii_electric_boogaloo.html</guid><category>BKPCTF</category><category>MITM</category></item><item><title>Boston Key Party CTF 2014 Crypto 200 Xorxes the Hash</title><link>https://ddaa.tw/bkpctf_crypto_200_xorxes_the_hash.html</link><description>&lt;p&gt;這題出的有點爛&lt;br&gt;
限制太少導致 flag 可能有很多種&lt;br&gt;
卻要 match md5sum 的才是正解&lt;br&gt;
有點無言 ORZ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Crypto 200，這題是一個 python script&lt;br&gt;
此題敘述如下：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xorxes is a hash collision challenge. The goal is to find a second preimage for the input string "Klaatubaradanikto". Submit it as the flag. UPDATE: It has been pointed out that there are multiple …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 03 Mar 2014 00:48:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-03:/bkpctf_crypto_200_xorxes_the_hash.html</guid><category>BKPCTF</category><category>Collision</category></item><item><title>Boston Key Party CTF 2014 Pwn 100 risc_emu</title><link>https://ddaa.tw/bkpctf_pwn_100_risc_emu.html</link><description>&lt;p&gt;這次為期36小時&lt;br&gt;
題目很多 而且有些感覺很有趣&lt;br&gt;
可惜周六有點事情 這次沒辦法全程參與&lt;br&gt;
最後只拿到500分 好弱 ORZ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題是模擬 RISC CPU 的程式&lt;br&gt;
類型是 Pwning , ELF x64&lt;br&gt;
能執行類似 ARM 語法的模擬器  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RISC CPU Emulator BkP 2014&lt;br&gt;
Give me your bytecode!&lt;br&gt;
Please give me your bytecode base64'd:&lt;br&gt;
aaaa&lt;br&gt;
Got it, executing aaaa now!&lt;br&gt;
I don't recognize opcode 0x69  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我們可以給它一個 bytecode (須加密成 base64)&lt;br&gt;
格式為 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Sun, 02 Mar 2014 23:50:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-03-02:/bkpctf_pwn_100_risc_emu.html</guid><category>BKPCTF</category><category>Out-of-bound</category></item><item><title>Codegate CTF Preliminary 2014 200 Web Proxy</title><link>https://ddaa.tw/codegate_web_200_web_proxy.html</link><description>&lt;p&gt;這題被 &lt;strong&gt;orange&lt;/strong&gt; 秒殺了&lt;br&gt;
我是賽後才解出來的 Orz  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;網址點開是一個 proxy 頁面&lt;br&gt;
在 input form 輸入網址後&lt;br&gt;
會將網頁的部分內容和 header 印出來  &lt;/p&gt;
&lt;p&gt;打開 source code 可以看到註解有提示&lt;br&gt;
&lt;em&gt;&lt;!-- admin/index.php --&gt;&lt;/em&gt;&lt;br&gt;
嘗試用 proxy load 頁面看看:&lt;br&gt;
&lt;code&gt;http://58.229.183.24/188f6594f694a3ca082f7530b5efc58dedf81b8d/admin/index.php&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;403 Forbidden  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這題的方向應該很明確了&lt;br&gt;
透過 proxy 去存取 &lt;code&gt;admin.php&lt;/code&gt;&lt;br&gt;
題目的環境是 &lt;strong&gt;apache&lt;/strong&gt;&lt;br&gt;
應該是透過 &lt;code&gt;.htaccess&lt;/code&gt; 去擋的&lt;br&gt;
不過似乎沒辦法拿到設定  &lt;/p&gt;
&lt;p&gt;先隨便跳轉一個網頁&lt;br&gt;
&lt;code&gt;http://58.229 …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Wed, 26 Feb 2014 02:24:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-02-26:/codegate_web_200_web_proxy.html</guid><category>Codegate CTF</category><category>CRLF</category></item><item><title>Codegate CTF Preliminary 2014 150 WeirdShark</title><link>https://ddaa.tw/codegate_forensic_150_weirdshark.html</link><description>&lt;p&gt;這題是這次 CTF 唯一的一題 Forensics ......  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;題目是一個 pcap 檔&lt;br&gt;
用 &lt;strong&gt;wireshark&lt;/strong&gt; 開啟卻出現錯誤訊息&lt;br&gt;
&lt;img alt="weirdshark1.PNG" src="https://ddaa.tw/images/codegate_2014_weirdshark_1.png"&gt;  &lt;/p&gt;
&lt;p&gt;看來是毀損了&lt;br&gt;
只好想辦法修復&lt;br&gt;
找到一個線上修復 pcap 的網站&lt;br&gt;
&lt;a href="http://f00l.de/pcapfix/"&gt;pcapfix&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;修復後再開一次檔案...fail again&lt;br&gt;
&lt;img alt="weirdshark2.PNG" src="https://ddaa.tw/images/codegate_2014_weirdshark_2.png"&gt;&lt;br&gt;
至少 &lt;em&gt;cap_len&lt;/em&gt; 變小了&lt;br&gt;
這次只好自己手動修復了 QQ&lt;br&gt;
&lt;code&gt;62 = 0x3E, 64 = 0x40&lt;/code&gt;&lt;br&gt;
搜尋一下 0x40&lt;br&gt;
嘗試改成 0x3E&lt;br&gt;
&lt;img alt="weirdshark3.PNG" src="https://ddaa.tw/images/codegate_2014_weirdshark_3.png"&gt;&lt;br&gt;
然後就 work 了... =.=  &lt;/p&gt;
&lt;p&gt;除了一般 tcp 就只出現 http了&lt;br&gt;
看到有 &lt;em&gt;GET /xxx.jpg&lt;/em&gt; 的可疑封包&lt;br&gt;
把檔案解開來看看&lt;br&gt;
&lt;code&gt;file -&amp;gt; extract object -&amp;gt; http&lt;/code&gt;&lt;br&gt;
將所有檔案檢查過以後 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 25 Feb 2014 00:20:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-02-25:/codegate_forensic_150_weirdshark.html</guid><category>Codegate CTF</category><category>Wireshark</category></item><item><title>Codegate CTF Preliminary 2014 200 dodoCrackme</title><link>https://ddaa.tw/codegate_reverse_200_dodocrackme.html</link><description>&lt;p&gt;這是應該是我玩過的 CTF 裡面最硬的一次 ORZ&lt;br&gt;
大量的 pwn 和 reversing&lt;br&gt;
根本破壞遊戲體驗....= =&lt;br&gt;
這次跟 217 和 chroot 還有 sqlab 學長一起參加&lt;br&gt;
跟大大們學到很多招數 :)&lt;br&gt;
希望下次別這麼醬油了 Orz  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題是 &lt;strong&gt;ELF 64-bit LSB executable&lt;/strong&gt;&lt;br&gt;
先觀察一下行為:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;root@localhost's password: 1234&lt;br&gt;
Permission denied (password).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感覺就要先把 root password 弄到手&lt;br&gt;
先把分析看看 binary&lt;br&gt;
用ida打開會嚇一跳&lt;br&gt;
因為是用組語寫的 Orz&lt;br&gt;
function 只有一個start&lt;br&gt;
出現很多 syscall  &lt;/p&gt;
&lt;p&gt;查一下資料發現 syscall 會把 call number …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 24 Feb 2014 01:53:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-02-24:/codegate_reverse_200_dodocrackme.html</guid><category>Codegate CTF</category></item><item><title>Olympic CTF 2014 10 point summary</title><link>https://ddaa.tw/olympic_other_10_summary.html</link><description>&lt;p&gt;這次的戰績只有慘不忍睹....&lt;br&gt;
除了 web200 以外&lt;br&gt;
其他解出的題目都只有 10 分 Orz&lt;br&gt;
Web200 Orange 大大的 &lt;a href="http://blog.orange.tw/2014/02/olympic-ctf-2014-curling-200-write-up.html"&gt;write up&lt;/a&gt; 已經很詳細了&lt;br&gt;
就不想再寫一份了 XD  &lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Freestyle 10&lt;/h1&gt;
&lt;h2&gt;Trivial&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Hack the Planet_&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這題 hitcon 也有出過 XD&lt;br&gt;
google 一下就知道是驚嘆號了&lt;br&gt;
btw, 這題原出處好像是 defcon  &lt;/p&gt;
&lt;h1&gt;CURLing 10&lt;/h1&gt;
&lt;h2&gt;Out there&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Flag is out there:&lt;br&gt;
http://[2a02:6b8:0:141f:fea9:d5ff:fed5:XX01]/&lt;br&gt;
Flag format …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 10 Feb 2014 21:22:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-02-10:/olympic_other_10_summary.html</guid><category>Other CTF</category></item><item><title>phd CTF 2014 Pwn 3900 pyjail</title><link>https://ddaa.tw/phd_pwn_3900_pyjail.html</link><description>&lt;p&gt;這題解超久 = = 好險有解出來&lt;br&gt;
但是知道關鍵又覺得這題好像沒什麼 Orz&lt;br&gt;
就好像變魔術一樣&lt;br&gt;
謎底揭曉就不好玩了 QQ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題給了 py 的 source code&lt;br&gt;
我們可以輸入一些指令&lt;br&gt;
pyjail 會利用 &lt;code&gt;exec&lt;/code&gt; 去執行&lt;br&gt;
但是有做一些限制:  &lt;/p&gt;
&lt;p&gt;1) 以下關鍵字都被過濾了...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sanitize = re.compile(  
  r&amp;#39;(?:__|import|globals|locals|exec|eval|join|format|replace|translate|try|except|with|content|frame|back)&amp;#39;  
  ).sub  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) 僅接受以下字元  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alphabet = &amp;#39; \n\r0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ(),.:;&amp;lt;=&amp;gt;[]_{}&amp;#39;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3) 只留下 trusted …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 28 Jan 2014 21:31:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-01-28:/phd_pwn_3900_pyjail.html</guid><category>Other CTF</category><category>Jailbreak</category></item><item><title>phd CTF 2014 Web 2700 PHDays</title><link>https://ddaa.tw/phd_web_2700_phdays.html</link><description>&lt;p&gt;其實題目全名是&lt;br&gt;
&lt;em&gt;stand back, we have PHDays!&lt;/em&gt;&lt;br&gt;
我去翻以前上課的投影片才發現關鍵&lt;br&gt;
好險以前有好好上課 XDD  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;連到網頁經過檢查以後&lt;br&gt;
會發現存在 &lt;code&gt;index.php~&lt;/code&gt; 這種暫存檔&lt;br&gt;
裡面有著登入的 source code  &lt;/p&gt;
&lt;p&gt;裡面有一行：&lt;br&gt;
&lt;code&gt;$query = "SELECT username FROM users WHERE id='$uid'";&lt;/code&gt;&lt;br&gt;
uid 並沒有做過濾，我們可以做 &lt;strong&gt;SQL injection&lt;/strong&gt;&lt;br&gt;
但是...  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if(isset($_COOKIE[&amp;#39;uid&amp;#39;])) {
  $uid = openssl_decrypt ($_COOKIE[&amp;#39;uid&amp;#39;], $method, $key, false, $iv);
}
else {
  $uid = generateRandomString(32);
  setcookie(&amp;quot;uid …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Tue, 28 Jan 2014 20:05:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-01-28:/phd_web_2700_phdays.html</guid><category>Other CTF</category><category>SQL Injection</category><category>Frequency Analysis</category></item><item><title>GiTs 2014 Crypto 75 Dogecrypt</title><link>https://ddaa.tw/gits_crypto_75_dogecrypt.html</link><description>&lt;p&gt;老實說我覺得這題出滿爛的&lt;br&gt;
害我花最長時間解結果沒解出來&lt;br&gt;
因為最關鍵的資訊是在 IRC 上提示的 ORZ  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這題給的檔案是一個加密過後的文件&lt;br&gt;
前面的標頭是 &lt;strong&gt;VimCrypt~01!&lt;/strong&gt;&lt;br&gt;
google 以後我才知道原來 &lt;em&gt;vim&lt;/em&gt; 可以用 &lt;code&gt;:X&lt;/code&gt; 或 &lt;code&gt;-x&lt;/code&gt; 加密文件 =.=&lt;br&gt;
加密方式又有分較舊版的 &lt;strong&gt;PKZIP (VimCrypt~01)&lt;/strong&gt; 和新版的 &lt;strong&gt;blowfish (VimCrypt~02)&lt;/strong&gt;&lt;br&gt;
這題是舊版的 &lt;strong&gt;PKZIP&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;一開始 google 尋找解法&lt;br&gt;
發現有人寫了 &lt;strong&gt;vimzipper&lt;/strong&gt;&lt;br&gt;
用途是將加密過的 vim 文件重新包裝成 zip 的格式&lt;br&gt;
包完可以用 &lt;strong&gt;pkcrack&lt;/strong&gt; 或其他破解 zip 的軟體去分析&lt;br&gt;
但是測試後重新封裝的 zip 沒辦法用 brute-force 去得到 key&lt;br&gt;
&lt;strong&gt;pkcrack …&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 20 Jan 2014 23:46:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-01-20:/gits_crypto_75_dogecrypt.html</guid><category>Other CTF</category></item><item><title>GiTs 2014 Reverse 150 papsmear</title><link>https://ddaa.tw/gits_reverse_150_papsmear.html</link><description>&lt;p&gt;這題很慢才打開&lt;br&gt;
解出來的時後竟然超過時間了阿阿阿&lt;br&gt;
悲劇 看來還是對 python 不夠熟  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;根據說明用 nc 連至目標後&lt;br&gt;
隨便輸入一些字串&lt;br&gt;
得到錯誤訊息 :  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serial: asd&lt;br&gt;
Bzzt. Wrong!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接打開檔案發現是一個 python 的 code&lt;br&gt;
最後有兩行:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open(&amp;#39;flag.txt&amp;#39;,&amp;#39;r&amp;#39;) as f:
    print f.read()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看來這題的目的很明顯了&lt;br&gt;
需要找出一個正確 Serial 滿足所有條件&lt;br&gt;
Server 就會把 key 給噴出來&lt;br&gt;
剩下的就是 trace code...&lt;br&gt;
首先，程式將 Serial 以 &lt;em&gt;-&lt;/em&gt; 分開 變成 6 個數字&lt;br&gt;
每次取 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 20 Jan 2014 19:58:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-01-20:/gits_reverse_150_papsmear.html</guid><category>Other CTF</category></item><item><title>GiTs 2014 Trivia 150 lugkist</title><link>https://ddaa.tw/gits_trivia_150_lugkist.html</link><description>&lt;p&gt;這次的CTF全名是 : ghost in the shell code&lt;br&gt;
超級長 所以縮寫成 GiTs  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;將xz檔解壓縮以後得到的是一個純文字的文件&lt;br&gt;
前面兩行是 Find the key&lt;br&gt;
後面開始是好幾行的大寫英文字母 每行有六個字  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GVZSNG
AXZIOG
YNAISG
ASAIUG
....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一時間以為是 &lt;strong&gt;ADFGVX&lt;/strong&gt; 加密&lt;br&gt;
但是仔細看並不是這麼回事&lt;br&gt;
先寫個簡單的小程式來統計出現的字母&lt;br&gt;
發現文中只出現 &lt;strong&gt;AEGIKLNOPSTUVXYZ&lt;/strong&gt;&lt;br&gt;
於是就把這一串拿去 google&lt;br&gt;
找得到的討論串不多&lt;br&gt;
其中一個標題是 &lt;em&gt;SMB1 Game Genie thread of epic winness&lt;/em&gt;&lt;br&gt;
看完討論得知 &lt;strong&gt;AEGIKLNOPSTUVXYZ&lt;/strong&gt; 是某個遊戲機金手指的輸入字元&lt;br&gt;
&lt;img alt="game_genie.png" src="https://ddaa.tw/images/gits_2014_lugkist_1.png"&gt;&lt;/p&gt;
&lt;p&gt;於是以 &lt;strong&gt;Game Genie&lt;/strong&gt; 為關鍵字下去搜尋&lt;br&gt;
得知每一個 &lt;strong&gt;AEGIKLNOPSTUVXYZ&lt;/strong&gt; 的字串&lt;br&gt;
都可以對應到一個 hex …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 20 Jan 2014 19:04:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2014-01-20:/gits_trivia_150_lugkist.html</guid><category>Other CTF</category></item><item><title>30C3CTF 2013 Number 100 Guess</title><link>https://ddaa.tw/30c3ctf_2013_number_100_guess.html</link><description>&lt;p&gt;第一次玩的 wargame --- 程式安全的作業1&lt;br&gt;
也是猜數字...不過&lt;br&gt;
這題好難 Orz...  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先 nc 連過去看看情況  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to this little guessing game!&lt;br&gt;
You have 0/10 right guesses, whats your next guess? 123&lt;br&gt;
Nope, that was wrong, correct would have been 8309891200023509866...&lt;br&gt;
You have 0/10 right guesses, whats your next guess? 456&lt;br&gt;
Nope, that was …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 30 Dec 2013 22:56:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2013-12-30:/30c3ctf_2013_number_100_guess.html</guid><category>3XC3CTF</category><category>PRNG</category></item><item><title>30C3CTF 2013 PWN 100 DOGE1</title><link>https://ddaa.tw/30c3ctf_2013_pwn_100_doge1.html</link><description>&lt;p&gt;這次都沒有人陪打 QQ&lt;br&gt;
只解兩題 100 分...真慘&lt;br&gt;
不過這題 100 分，跟另一題的難度也差太多了吧 = =  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;先用 nc 連線過去，要求我們輸入名稱，然後就看到一隻...豬頭?&lt;br&gt;
提示有兩個指令好用: &lt;code&gt;feed&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;&lt;br&gt;
&lt;code&gt;show&lt;/code&gt; 是再印一次豬頭，&lt;code&gt;feed&lt;/code&gt; 也差不多，奇怪的功能 = =&lt;br&gt;
&lt;img alt="doge1.png" src="https://ddaa.tw/images/30c3CTF_2013_doge_1.png"&gt;  &lt;/p&gt;
&lt;p&gt;假如不輸入 &lt;code&gt;feed&lt;/code&gt; 或 &lt;code&gt;show&lt;/code&gt;，試著輸入長字串，毫無反應 Orz&lt;br&gt;
試試看輸入超長名稱....沒有印出那顆豬頭了 XD  &lt;/p&gt;
&lt;p&gt;這題有提供原始程式，資料夾底下有三個檔案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ascii_art_doge_color.txt&lt;/li&gt;
&lt;li&gt;doge.so&lt;/li&gt;
&lt;li&gt;run.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;ascii_art_doge_color.txt&lt;/em&gt; 就是那隻豬頭的 ascii 圖檔&lt;br&gt;
&lt;em&gt;run.py&lt;/em&gt; 只有 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ddaa</dc:creator><pubDate>Mon, 30 Dec 2013 21:25:00 +0800</pubDate><guid isPermaLink="false">tag:ddaa.tw,2013-12-30:/30c3ctf_2013_pwn_100_doge1.html</guid><category>3XC3CTF</category><category>Stack Overflow</category></item></channel></rss>